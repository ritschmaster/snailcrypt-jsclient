sap.ui.define(['sap/ui/webc/common/thirdparty/base/renderer/LitRenderer'], function (litRender) { 'use strict';

	const block0 = (context, tags, suffix) => suffix ? litRender.html`<div class="ui5-input-root ui5-input-focusable-element" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}"><div class="ui5-input-content"><span id="${litRender.ifDefined(context._id)}-hiddenText-nMore" class="ui5-hidden-text">${litRender.ifDefined(context._tokensCountText)}</span><${litRender.scopeTag("ui5-tokenizer", tags, suffix)} class="ui5-multi-input-tokenizer" .morePopoverOpener=${litRender.ifDefined(context)} .popoverMinWidth=${litRender.ifDefined(context._inputWidth)} .valueState=${litRender.ifDefined(context.valueState)} ?expanded="${context.expandedTokenizer}" show-more @keydown="${context._onTokenizerKeydown}" @show-more-items-press=${context.showMorePress} @ui5-token-delete=${litRender.ifDefined(context.tokenDelete)} @focusout="${context._tokenizerFocusOut}"><slot name="tokens"></slot><div slot="valueStateMessage">${ context.shouldDisplayDefaultValueStateMessage ? block1(context) : block2(context) }</div></${litRender.scopeTag("ui5-tokenizer", tags, suffix)}><input id="${litRender.ifDefined(context._id)}-inner" class="ui5-input-inner" style="${litRender.styleMap(context.styles.innerInput)}" type="${litRender.ifDefined(context.inputType)}" inner-input ?inner-input-with-icon="${context.icon.length}" ?disabled="${context.disabled}" ?readonly="${context._readonly}" .value="${litRender.ifDefined(context.value)}" placeholder="${litRender.ifDefined(context._placeholder)}" maxlength="${litRender.ifDefined(context.maxlength)}" role="${litRender.ifDefined(context.accInfo.input.role)}" aria-controls="${litRender.ifDefined(context.accInfo.input.ariaControls)}" aria-invalid="${litRender.ifDefined(context.accInfo.input.ariaInvalid)}" aria-haspopup="${litRender.ifDefined(context.accInfo.input.ariaHasPopup)}" aria-describedby="${litRender.ifDefined(context.accInfo.input.ariaDescribedBy)}" aria-roledescription="${litRender.ifDefined(context.accInfo.input.ariaRoledescription)}" aria-autocomplete="${litRender.ifDefined(context.accInfo.input.ariaAutoComplete)}" aria-expanded="${litRender.ifDefined(context.accInfo.input.ariaExpanded)}" aria-label="${litRender.ifDefined(context.accInfo.input.ariaLabel)}" aria-required="${litRender.ifDefined(context.required)}" @input="${context._handleInput}" @change="${context._handleNativeInputChange}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click=${context._click} @focusin=${context.innerFocusIn} data-sap-focus-ref step="${litRender.ifDefined(context.nativeInputAttributes.step)}" min="${litRender.ifDefined(context.nativeInputAttributes.min)}" max="${litRender.ifDefined(context.nativeInputAttributes.max)}" />${ context.effectiveShowClearIcon ? block4(context, tags, suffix) : undefined }${ context.icon.length ? block5() : undefined }<div class="ui5-input-value-state-icon">${litRender.unsafeHTML(context._valueStateInputIcon)}</div>${ context.showValueHelpIcon ? block6(context, tags, suffix) : undefined }${ context.showSuggestions ? block7(context) : undefined }${ context.accInfo.input.ariaDescription ? block8(context) : undefined }${ context.hasValueState ? block9(context) : undefined }</div><slot name="formSupport"></slot></div> ` : litRender.html`<div class="ui5-input-root ui5-input-focusable-element" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}"><div class="ui5-input-content"><span id="${litRender.ifDefined(context._id)}-hiddenText-nMore" class="ui5-hidden-text">${litRender.ifDefined(context._tokensCountText)}</span><ui5-tokenizer class="ui5-multi-input-tokenizer" .morePopoverOpener=${litRender.ifDefined(context)} .popoverMinWidth=${litRender.ifDefined(context._inputWidth)} .valueState=${litRender.ifDefined(context.valueState)} ?expanded="${context.expandedTokenizer}" show-more @keydown="${context._onTokenizerKeydown}" @show-more-items-press=${context.showMorePress} @ui5-token-delete=${litRender.ifDefined(context.tokenDelete)} @focusout="${context._tokenizerFocusOut}"><slot name="tokens"></slot><div slot="valueStateMessage">${ context.shouldDisplayDefaultValueStateMessage ? block1(context) : block2(context) }</div></ui5-tokenizer><input id="${litRender.ifDefined(context._id)}-inner" class="ui5-input-inner" style="${litRender.styleMap(context.styles.innerInput)}" type="${litRender.ifDefined(context.inputType)}" inner-input ?inner-input-with-icon="${context.icon.length}" ?disabled="${context.disabled}" ?readonly="${context._readonly}" .value="${litRender.ifDefined(context.value)}" placeholder="${litRender.ifDefined(context._placeholder)}" maxlength="${litRender.ifDefined(context.maxlength)}" role="${litRender.ifDefined(context.accInfo.input.role)}" aria-controls="${litRender.ifDefined(context.accInfo.input.ariaControls)}" aria-invalid="${litRender.ifDefined(context.accInfo.input.ariaInvalid)}" aria-haspopup="${litRender.ifDefined(context.accInfo.input.ariaHasPopup)}" aria-describedby="${litRender.ifDefined(context.accInfo.input.ariaDescribedBy)}" aria-roledescription="${litRender.ifDefined(context.accInfo.input.ariaRoledescription)}" aria-autocomplete="${litRender.ifDefined(context.accInfo.input.ariaAutoComplete)}" aria-expanded="${litRender.ifDefined(context.accInfo.input.ariaExpanded)}" aria-label="${litRender.ifDefined(context.accInfo.input.ariaLabel)}" aria-required="${litRender.ifDefined(context.required)}" @input="${context._handleInput}" @change="${context._handleNativeInputChange}" @keydown="${context._onkeydown}" @keyup="${context._onkeyup}" @click=${context._click} @focusin=${context.innerFocusIn} data-sap-focus-ref step="${litRender.ifDefined(context.nativeInputAttributes.step)}" min="${litRender.ifDefined(context.nativeInputAttributes.min)}" max="${litRender.ifDefined(context.nativeInputAttributes.max)}" />${ context.effectiveShowClearIcon ? block4(context, tags, suffix) : undefined }${ context.icon.length ? block5() : undefined }<div class="ui5-input-value-state-icon">${litRender.unsafeHTML(context._valueStateInputIcon)}</div>${ context.showValueHelpIcon ? block6(context, tags, suffix) : undefined }${ context.showSuggestions ? block7(context) : undefined }${ context.accInfo.input.ariaDescription ? block8(context) : undefined }${ context.hasValueState ? block9(context) : undefined }</div><slot name="formSupport"></slot></div> `;
	const block1 = (context, tags, suffix) => litRender.html`${litRender.ifDefined(context.valueStateText)}`;
	const block2 = (context, tags, suffix) => litRender.html`${ litRender.repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block3(item)) }`;
	const block3 = (item, index, context, tags, suffix) => litRender.html`${litRender.ifDefined(item)}`;
	const block4 = (context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-icon", tags, suffix)} @click=${context._clear} tabindex="-1" input-icon class="ui5-input-clear-icon" name="decline"></${litRender.scopeTag("ui5-icon", tags, suffix)}>` : litRender.html`<ui5-icon @click=${context._clear} tabindex="-1" input-icon class="ui5-input-clear-icon" name="decline"></ui5-icon>`;
	const block5 = (context, tags, suffix) => litRender.html`<div class="ui5-input-icon-root"><slot name="icon"></slot></div>`;
	const block6 = (context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-icon", tags, suffix)} @click=${context.valueHelpPress} @mousedown=${context.valueHelpMouseDown} @mouseup=${context.valueHelpMouseUp} input-icon name="value-help"></${litRender.scopeTag("ui5-icon", tags, suffix)}>` : litRender.html`<ui5-icon @click=${context.valueHelpPress} @mousedown=${context.valueHelpMouseDown} @mouseup=${context.valueHelpMouseUp} input-icon name="value-help"></ui5-icon>`;
	const block7 = (context, tags, suffix) => litRender.html`<span id="${litRender.ifDefined(context._id)}-suggestionsText" class="ui5-hidden-text">${litRender.ifDefined(context.suggestionsText)}</span><span id="${litRender.ifDefined(context._id)}-selectionText" class="ui5-hidden-text" aria-live="polite" role="status"></span><span id="${litRender.ifDefined(context._id)}-suggestionsCount" class="ui5-hidden-text" aria-live="polite">${litRender.ifDefined(context.availableSuggestionsCount)}</span>`;
	const block8 = (context, tags, suffix) => litRender.html`<span id="${litRender.ifDefined(context._id)}-descr" class="ui5-hidden-text">${litRender.ifDefined(context.accInfo.input.ariaDescription)}</span>`;
	const block9 = (context, tags, suffix) => litRender.html`<span id="${litRender.ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${litRender.ifDefined(context.ariaValueStateHiddenText)}</span>`;

	return block0;

});
