sap.ui.define(['sap/ui/webc/common/thirdparty/base/renderer/LitRenderer'], function (litRender) { 'use strict';

	const block0 = (context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-responsive-popover", tags, suffix)} class="${litRender.classMap(context.classes.popover)}" hide-arrow content-only-on-desktop _disable-initial-focus placement-type="Bottom" horizontal-align="Stretch" @ui5-after-open=${litRender.ifDefined(context._afterOpenPopover)} @ui5-after-close=${litRender.ifDefined(context._afterClosePopover)}><${litRender.scopeTag("ui5-busy-indicator", tags, suffix)} ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></${litRender.scopeTag("ui5-busy-indicator", tags, suffix)}><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${litRender.ifDefined(context._headerTitleText)}</span><${litRender.scopeTag("ui5-button", tags, suffix)} class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></${litRender.scopeTag("ui5-button", tags, suffix)}></div><div class="row"><div class="input-root-phone" value-state="${litRender.ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${litRender.ifDefined(context.value)}" inner-input placeholder="${litRender.ifDefined(context.placeholder)}" value-state="${litRender.ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block1(context, tags, suffix) : undefined }</div>${ !context._isPhone ? block5(context, tags, suffix) : undefined }<${litRender.scopeTag("ui5-list", tags, suffix)} separators="None" @ui5-item-click=${litRender.ifDefined(context._selectItem)} @ui5-item-focused=${litRender.ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ litRender.repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block10(item, index, context, tags, suffix)) }</${litRender.scopeTag("ui5-list", tags, suffix)}><div slot="footer" class="ui5-responsive-popover-footer"><${litRender.scopeTag("ui5-button", tags, suffix)} design="Transparent" @click="${context._closeRespPopover}">OK</${litRender.scopeTag("ui5-button", tags, suffix)}></div></${litRender.scopeTag("ui5-responsive-popover", tags, suffix)}>${ context.shouldOpenValueStateMessagePopover ? block13(context, tags, suffix) : undefined }` : litRender.html`<ui5-responsive-popover class="${litRender.classMap(context.classes.popover)}" hide-arrow content-only-on-desktop _disable-initial-focus placement-type="Bottom" horizontal-align="Stretch" @ui5-after-open=${litRender.ifDefined(context._afterOpenPopover)} @ui5-after-close=${litRender.ifDefined(context._afterClosePopover)}><ui5-busy-indicator ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></ui5-busy-indicator><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${litRender.ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></ui5-button></div><div class="row"><div class="input-root-phone" value-state="${litRender.ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${litRender.ifDefined(context.value)}" inner-input placeholder="${litRender.ifDefined(context.placeholder)}" value-state="${litRender.ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block1(context, tags, suffix) : undefined }</div>${ !context._isPhone ? block5(context, tags, suffix) : undefined }<ui5-list separators="None" @ui5-item-click=${litRender.ifDefined(context._selectItem)} @ui5-item-focused=${litRender.ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ litRender.repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block10(item, index, context, tags, suffix)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">OK</ui5-button></div></ui5-responsive-popover>${ context.shouldOpenValueStateMessagePopover ? block13(context, tags, suffix) : undefined }`;
	const block1 = (context, tags, suffix) => suffix ? litRender.html`<div class="${litRender.classMap(context.classes.popoverValueState)}" style="${litRender.styleMap(context.styles.popoverValueStateMessage)}"><${litRender.scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></${litRender.scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block2(context) : block3(context) }</div>` : litRender.html`<div class="${litRender.classMap(context.classes.popoverValueState)}" style="${litRender.styleMap(context.styles.popoverValueStateMessage)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block2(context) : block3(context) }</div>`;
	const block2 = (context, tags, suffix) => litRender.html`${litRender.ifDefined(context.valueStateText)}`;
	const block3 = (context, tags, suffix) => litRender.html`${ litRender.repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block4(item)) }`;
	const block4 = (item, index, context, tags, suffix) => litRender.html`${litRender.ifDefined(item)}`;
	const block5 = (context, tags, suffix) => litRender.html`${ context.hasValueStateText ? block6(context, tags, suffix) : undefined }`;
	const block6 = (context, tags, suffix) => suffix ? litRender.html`<div class="ui5-responsive-popover-header ${litRender.classMap(context.classes.popoverValueState)}" ?focused=${context._isValueStateFocused} tabindex="0" style="${litRender.styleMap(context.styles.suggestionPopoverHeader)}"><${litRender.scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></${litRender.scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block7(context) : block8(context) }</div>` : litRender.html`<div class="ui5-responsive-popover-header ${litRender.classMap(context.classes.popoverValueState)}" ?focused=${context._isValueStateFocused} tabindex="0" style="${litRender.styleMap(context.styles.suggestionPopoverHeader)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block7(context) : block8(context) }</div>`;
	const block7 = (context, tags, suffix) => litRender.html`${litRender.ifDefined(context.valueStateText)}`;
	const block8 = (context, tags, suffix) => litRender.html`${ litRender.repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block9(item)) }`;
	const block9 = (item, index, context, tags, suffix) => litRender.html`${litRender.ifDefined(item)}`;
	const block10 = (item, index, context, tags, suffix) => litRender.html`${ item.isGroupItem ? block11(item, index, context, tags, suffix) : block12(item, index, context, tags, suffix) }`;
	const block11 = (item, index, context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-li-groupheader", tags, suffix)} ?focused=${item.focused}>${litRender.ifDefined(item.text)}</${litRender.scopeTag("ui5-li-groupheader", tags, suffix)}>` : litRender.html`<ui5-li-groupheader ?focused=${item.focused}>${litRender.ifDefined(item.text)}</ui5-li-groupheader>`;
	const block12 = (item, index, context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-li", tags, suffix)} type="Active" additional-text=${litRender.ifDefined(item.additionalText)} group-name=${litRender.ifDefined(item.groupName)} ._tabIndex=${litRender.ifDefined(item.itemTabIndex)} .mappedItem=${litRender.ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${litRender.ifDefined(item.text)}</${litRender.scopeTag("ui5-li", tags, suffix)}>` : litRender.html`<ui5-li type="Active" additional-text=${litRender.ifDefined(item.additionalText)} group-name=${litRender.ifDefined(item.groupName)} ._tabIndex=${litRender.ifDefined(item.itemTabIndex)} .mappedItem=${litRender.ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${litRender.ifDefined(item.text)}</ui5-li>`;
	const block13 = (context, tags, suffix) => suffix ? litRender.html`<${litRender.scopeTag("ui5-popover", tags, suffix)} skip-registry-update _disable-initial-focus prevent-focus-restore hide-arrow class="ui5-valuestatemessage-popover" horizontal-align="${litRender.ifDefined(context._valueStatePopoverHorizontalAlign)}" placement-type="Bottom"><div slot="header" class="${litRender.classMap(context.classes.popoverValueState)}" style="${litRender.styleMap(context.styles.popoverHeader)}"><${litRender.scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></${litRender.scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block14(context) : block15(context) }</div></${litRender.scopeTag("ui5-popover", tags, suffix)}>` : litRender.html`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore hide-arrow class="ui5-valuestatemessage-popover" horizontal-align="${litRender.ifDefined(context._valueStatePopoverHorizontalAlign)}" placement-type="Bottom"><div slot="header" class="${litRender.classMap(context.classes.popoverValueState)}" style="${litRender.styleMap(context.styles.popoverHeader)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${litRender.ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block14(context) : block15(context) }</div></ui5-popover>`;
	const block14 = (context, tags, suffix) => litRender.html`${litRender.ifDefined(context.valueStateText)}`;
	const block15 = (context, tags, suffix) => litRender.html`${ litRender.repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block16(item)) }`;
	const block16 = (item, index, context, tags, suffix) => litRender.html`${litRender.ifDefined(item)}`;

	return block0;

});
